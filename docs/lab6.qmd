---
title: "csu-ess-lab6"
format:
  html:
    self-contained: true
---

```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(patchwork)

if(!dir.exists("data")) dir.create("data")

download.file(
  'https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
  'data/camels_attributes_v2.0.pdf'
)

root <- 'https://gdex.ucar.edu/dataset/camels/file'
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
remote_files <- glue('{root}/camels_{types}.txt')
local_files  <- glue('data/camels_{types}.txt')

purrr::walk2(remote_files, local_files, download.file, quiet = TRUE)

data_list <- purrr::map(local_files, readr::read_csv2, show_col_types = FALSE)

data_list <- purrr::map(data_list, ~ dplyr::rename_with(.x, stringr::str_trim))

library(dplyr)
library(purrr)

camels <- powerjoin::power_full_join(data_list, by = "gauge_id")
```

#Question 1 answer: zero_q_freq represents the number of days where the flow is 0. "frequency of days with Q = 0 mm/day"

#Question 2 below:

```{r}
camels <- camels %>%
  mutate(
    aridity = as.numeric(aridity),
    p_mean = as.numeric(p_mean)
  )

map_aridity <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = aridity)) +
  scale_color_gradient(low = "yellow", high = "red") +
  ggthemes::theme_map() +
  labs(title = "CAMELS Sites Colored by Aridity")

map_pmean <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean)) +
  scale_color_gradient(low = "lightgreen", high = "darkgreen") +
  ggthemes::theme_map() +
  labs(title = "CAMELS Sites Colored by Mean Precipitation")

map_aridity + map_pmean
```

```{r}
camels <- camels %>%
  mutate(
    aridity = as.numeric(aridity),
    p_mean  = as.numeric(p_mean),
    q_mean  = as.numeric(q_mean)
  )
cor_data <- camels %>% 
  select(aridity, p_mean, q_mean) %>% 
  drop_na() %>% 
  cor()
print(cor_data)

ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm", color = "red", linetype = "dashed") +
  scale_color_viridis_c() +
  theme_linedraw() +
  theme(legend.position = "bottom") +
  labs(title = "Aridity vs Rainfall vs Runoff",
       x = "Aridity",
       y = "Rainfall (p_mean)",
       color = "Mean Flow (q_mean)")

ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() +
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(0.5, "cm")) +
  labs(title = "Log-Log Transform: Aridity vs Rainfall vs Runoff",
       x = "Log(Aridity)",
       y = "Log(Rainfall)",
       color = "Log(Mean Flow)")

set.seed(123)
camels <- camels %>% mutate(logQmean = log(q_mean))

camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)

rec <- recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  step_log(all_predictors()) %>%            
  step_interact(terms = ~ aridity:p_mean) %>% 
  step_naomit(all_predictors(), all_outcomes())

baked_data <- prep(rec, training = camels_train) %>% bake(new_data = NULL)

lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)

test_data <- bake(prep(rec, training = camels_train), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)

ggplot(test_data, aes(x = logQmean, y = lm_pred)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1) +
  geom_abline(color = "red", linewidth = 1) +
  labs(title = "Linear Model Using Base R",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow") +
  theme_linedraw()
lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

lm_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(lm_model) %>%
  fit(data = camels_train)

print(summary(extract_fit_engine(lm_wf))$coefficients)

lm_data <- augment(lm_wf, new_data = camels_test)
head(lm_data)

lm_metrics <- metrics(lm_data, truth = logQmean, estimate = .pred)
print(lm_metrics)

ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline(linetype = "dashed") +
  theme_linedraw() +
  labs(title = "Linear Model (Workflow): Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model) %>%
  fit(data = camels_train)

rf_data <- augment(rf_wf, new_data = camels_test)
head(rf_data)

rf_metrics <- metrics(rf_data, truth = logQmean, estimate = .pred)
print(rf_metrics)

ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline(linetype = "dashed") +
  theme_linedraw() +
  labs(title = "Random Forest Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```

#Question 3 below

```{r}
library(xgboost)
xgb_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

xgb_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(xgb_model) %>%
  fit(data = camels_train)

nn_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(nn_model) %>%
  fit(data = camels_train)

xgb_data <- augment(xgb_wf, new_data = camels_test)
nn_data  <- augment(nn_wf, new_data = camels_test)

xgb_metrics <- metrics(xgb_data, truth = logQmean, estimate = .pred)
nn_metrics  <- metrics(nn_data, truth = logQmean, estimate = .pred)

print(xgb_metrics)
print(nn_metrics)

wf_set <- workflow_set(
  preproc = list(rec = rec),
  models = list(
    lm  = lm_model,
    rf  = rf_model,
    xgb = xgb_model,
    nn  = nn_model
  )
)

wf_set <- wf_set %>% 
  workflow_map("fit_resamples", resamples = camels_cv)

autoplot(wf_set)

ranked_results <- rank_results(wf_set, rank_metric = "rsq", select_best = TRUE)
print(ranked_results)

best_wf <- rf_wf

best_test_data <- augment(best_wf, new_data = camels_test)
best_metrics <- metrics(best_test_data, truth = logQmean, estimate = .pred)
print(best_metrics)

ggplot(best_test_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline(linetype = "dashed") +
  theme_linedraw() +
  labs(title = "Best Model (Random Forest): Observed vs Predicted (Test Data)",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```

#Answer to Question 3: I would move forward with the random forest model because I evaluated it as the most accurate.

#Question 4

```{r}
camels_split <- initial_split(camels, prop = 0.75)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)

rec <- recipe(logQmean ~ aridity + p_mean + slope_mean + elev_mean, data = camels_train) %>%
  step_mutate(across(c(aridity, p_mean, slope_mean, elev_mean), as.numeric)) %>%
  step_normalize(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) %>%
  step_poly(all_predictors(), degree = 2) %>%
  step_naomit(all_predictors(), all_outcomes())

lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

rf_model <- rand_forest(mtry = 2, trees = 500, min_n = 5) %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

xgb_model <- boost_tree(trees = 1000, learn_rate = 0.05, tree_depth = 6) %>%
  set_engine("xgboost") %>%
  set_mode("regression")

wf_set <- workflow_set(
  preproc = list(basic = rec),
  models = list(
    lm  = lm_model,
    rf  = rf_model,
    xgb = xgb_model
  )
)

wf_set_res <- wf_set %>% 
  workflow_map("fit_resamples", resamples = camels_cv, verbose = TRUE)

autoplot(wf_set_res)

ranked_results <- rank_results(wf_set_res, rank_metric = "rsq", select_best = TRUE)
print(ranked_results)
```

#Extraction and evaluation
```{r}
best_wf_id <- ranked_results$wflow_id[1]
best_wf <- extract_workflow(wf_set_res, id = best_wf_id)

final_wf <- best_wf %>% fit(data = camels_train)

test_results <- augment(final_wf, new_data = camels_test)

test_metrics <- metrics(test_results, truth = logQmean, estimate = .pred)
print(test_metrics)

ggplot(test_results, aes(x = logQmean, y = .pred, color = aridity)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  labs(title = "Best Model: Observed vs Predicted Log Mean Flow",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity") +
  theme_minimal()
```

